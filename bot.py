# Harry Potter bot
# –ê–≤—Ç–æ—Ä: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ
# –ì–æ–¥: 2025
# Telegram: @space_ranger3209
# Github: https://github.com/sergo100
# –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã

import json
import logging
import os
from telegram import (
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    KeyboardButton,
    ReplyKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    MessageHandler,
    filters
)
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–æ–∫–µ–Ω–∞ –∏–∑ .env
load_dotenv()
TOKEN = os.getenv("BOT_TOKEN")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π (–ø—É—Ç–∏ –ë–ï–ó 'potter_bot/', —Ç.–∫. –∑–∞–ø—É—Å–∫–∞–µ–º –∏–∑ potter_bot) ---
try:
    with open("questions.json", "r", encoding="utf-8") as f:
        questions = json.load(f)
except FileNotFoundError:
    logging.error("‚õîÔ∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª 'questions.json' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'potter_bot'.")
    questions = [] # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã–º —Å–ø–∏—Å–∫–æ–º, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–æ–∫

try:
    with open("character_results.json", "r", encoding="utf-8") as f:
        character_results = json.load(f)
except FileNotFoundError:
    logging.error("‚õîÔ∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª 'character_results.json' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'potter_bot'.")
    character_results = {} # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Å—Ç—ã–º —Å–ª–æ–≤–∞—Ä–µ–º

# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ —Å–µ—Å—Å–∏–∏
user_sessions = {}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å"
async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id_override=None):
    keyboard = [[KeyboardButton("–ù–∞—á–∞—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)

    target_chat_id = chat_id_override if chat_id_override else update.effective_chat.id

    await context.bot.send_message(
        chat_id=target_chat_id,
        text="–ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å', —á—Ç–æ–±—ã –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç.",
        reply_markup=reply_markup
    )


# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø–æ /start –∏–ª–∏ –∫–Ω–æ–ø–∫–µ "–ù–∞—á–∞—Ç—å")
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º user_scores –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Å 0 –æ—á–∫–∞–º–∏
    initial_scores = {char_name: 0 for char_name in character_results.keys()}
    user_sessions[user_id] = {"current_q": 0, "scores": initial_scores}
    
    inline_keyboard = [
        [InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç", callback_data="start_quiz")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="donate")],
        [InlineKeyboardButton("–û–± –∞–≤—Ç–æ—Ä–µ", callback_data="about_author")] # –í–∞—à–∞ –∫–Ω–æ–ø–∫–∞ "–û–± –∞–≤—Ç–æ—Ä–µ"
    ]
    inline_reply_markup = InlineKeyboardMarkup(inline_keyboard)

    welcome_image_path = "assets/welcome.jpg"
    try:
        await update.message.reply_photo(
            photo=open(welcome_image_path, "rb"), # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
            caption="üßô‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç: *–ö—Ç–æ —Ç—ã –∏–∑ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞?*\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–∑–Ω–∞–π, –∫–µ–º –±—ã —Ç—ã –±—ã–ª –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –º–∏—Ä–µ!",
            parse_mode="Markdown",
            reply_markup=inline_reply_markup
        )
    except FileNotFoundError:
        logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª '{welcome_image_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'potter_bot/assets/'.")
        await update.message.reply_text(
            "üßô‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç: *–ö—Ç–æ —Ç—ã –∏–∑ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞?*\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–∑–Ω–∞–π, –∫–µ–º –±—ã —Ç—ã –±—ã–ª –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –º–∏—Ä–µ!",
            parse_mode="Markdown",
            reply_markup=inline_reply_markup
        )
    except Exception as e:
        logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ: {e}")
        await update.message.reply_text(
            "üßô‚Äç‚ôÇÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–µ—Å—Ç: *–ö—Ç–æ —Ç—ã –∏–∑ –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞?*\n\n–û—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ —É–∑–Ω–∞–π, –∫–µ–º –±—ã —Ç—ã –±—ã–ª –≤ –≤–æ–ª—à–µ–±–Ω–æ–º –º–∏—Ä–µ!",
            parse_mode="Markdown",
            reply_markup=inline_reply_markup
        )
    
    await show_main_menu(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
async def handle_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    user_id = query.from_user.id

    if query.data == "start_quiz":
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Ç–µ—Å—Ç–∞
        initial_scores = {char_name: 0 for char_name in character_results.keys()}
        user_sessions[user_id] = {"current_q": 0, "scores": initial_scores}
        await send_question(query, context)
    elif query.data.startswith("answer_"):
        choice_index = int(query.data.split("_")[1]) # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–µ–∫—Å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (0, 1, 2, 3)
        session = user_sessions.get(user_id)
        if session:
            current_q_index = session["current_q"]
            if current_q_index < len(questions):
                current_question = questions[current_q_index]
                selected_option = current_question["options"][choice_index]
                
                # –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
                for char_name, score_value in selected_option.get("scores", {}).items():
                    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ character_results, –ø—Ä–µ–∂–¥–µ —á–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å –æ—á–∫–∏
                    if char_name in session["scores"]:
                        session["scores"][char_name] += score_value
                    else:
                        logging.warning(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ü–µ—Ä—Å–æ–Ω–∞–∂ '{char_name}' –∏–∑ 'questions.json' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ 'character_results.json'. –û—á–∫–∏ –Ω–µ –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª–µ–Ω—ã.")


                session["current_q"] += 1
                if session["current_q"] < len(questions):
                    await send_question(query, context)
                else:
                    await show_result(query, context, session["scores"]) # –ü–µ—Ä–µ–¥–∞–µ–º user_scores
            else:
                await query.edit_message_text("–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑' –∏–ª–∏ '–ù–∞—á–∞—Ç—å'.")
        else:
            await query.edit_message_text("–ö–∞–∂–µ—Ç—Å—è, –≤–∞—à–∞ —Å–µ—Å—Å–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞. –ù–∞–∂–º–∏—Ç–µ '–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç' —Å–Ω–æ–≤–∞.")
    elif query.data == "donate":
        donate_qr_path = "assets/donate_qr.png"
        try:
            await query.message.reply_photo(
                photo=open(donate_qr_path, "rb"), # –û—Ç–∫—Ä—ã—Ç–∏–µ —Ñ–∞–π–ª–∞ –ø—Ä—è–º–æ –∑–¥–µ—Å—å
                caption="üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É!",
            )
        except FileNotFoundError:
            logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª '{donate_qr_path}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'potter_bot/assets/'.")
            await query.message.reply_text("üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! (QR-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω)")
        except Exception as e:
            logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞: {e}")
            await query.message.reply_text("üíñ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É! (–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ QR-–∫–æ–¥–∞)")
    elif query.data == "about_author":
        await query.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø - –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è. –ú–æ–π –∞–≤—Ç–æ—Ä –æ—á–µ–Ω—å –ª—é–±–∏—Ç –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞ –∏ —Å—Ç–∞—Ä–∞–ª—Å—è —Å–¥–µ–ª–∞—Ç—å —ç—Ç–æ—Ç —Ç–µ—Å—Ç –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–º –¥–ª—è —Ñ–∞–Ω–∞—Ç–æ–≤! ‚ú®"
            "\n\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–∏—à–∏—Ç–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º\n"
            "–ê–≤—Ç–æ—Ä: –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–∏–µ–Ω–∫–æ\n"
            "Telegram: @space_ranger3209\n" 
            "Github: https://github.com/sergo100\n"
            "¬© 2025 –í—Å–µ –ø—Ä–∞–≤–∞ –∑–∞—â–∏—â–µ–Ω—ã" 
             
        )
    elif query.data == "restart":
        # –ü–µ—Ä–µ–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ—á–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –ø—Ä–∏ —Ä–µ—Å—Ç–∞—Ä—Ç–µ
        initial_scores = {char_name: 0 for char_name in character_results.keys()}
        user_sessions[user_id] = {"current_q": 0, "scores": initial_scores}
        await send_question(query, context)

# –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–∞
async def send_question(query, context):
    user_id = query.from_user.id
    session = user_sessions[user_id]
    q_index = session["current_q"]

    if not questions:
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è —Ç–µ—Å—Ç–∞ –µ—â–µ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_quiz")]])
        )
        logging.error("‚õîÔ∏è –û–®–ò–ë–ö–ê: –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø—É—Å—Ç! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ 'questions.json'.")
        return

    if q_index >= len(questions):
        logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê: –ü–æ–ø—ã—Ç–∫–∞ –ø–æ–ª—É—á–∏—Ç—å –≤–æ–ø—Ä–æ—Å —Å –∏–Ω–¥–µ–∫—Å–æ–º {q_index}, –Ω–æ –≤—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤ {len(questions)}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_quiz")]])
        )
        return

    q = questions[q_index]

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ç–µ–∫—Å—Ç–æ–º –∏–∑ options
    keyboard = []
    for i, option_data in enumerate(q["options"]):
        # option_data —Ç–µ–ø–µ—Ä—å —Å–ª–æ–≤–∞—Ä—å, –ø–æ—ç—Ç–æ–º—É –∏—Å–ø–æ–ª—å–∑—É–µ–º option_data["text"]
        keyboard.append([InlineKeyboardButton(option_data["text"], callback_data=f"answer_{i}")])
    reply_markup = InlineKeyboardMarkup(keyboard)

    try:
        await query.message.delete()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text=f"‚ùì *–í–æ–ø—Ä–æ—Å {q_index + 1} –∏–∑ {len(questions)}:*\n\n{q['question']}",
        reply_markup=reply_markup,
        parse_mode="Markdown"
    )

# –ü–æ–¥–≤–µ–¥–µ–Ω–∏–µ –∏—Ç–æ–≥–æ–≤
async def show_result(query, context, user_scores):
    # –ï—Å–ª–∏ character_results –ø—É—Å—Ç, —Å—Ä–∞–∑—É —Å–æ–æ–±—â–∞–µ–º –æ–± –æ—à–∏–±–∫–µ
    if not character_results:
        logging.error("‚õîÔ∏è –û–®–ò–ë–ö–ê: character_results.json –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ. –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞.")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_quiz")]])
        )
        await show_main_menu(update=None, context=context, chat_id_override=query.message.chat_id)
        return

    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –æ—á–∫–æ–≤
    dominant_character_name = None
    if not user_scores or all(score == 0 for score in user_scores.values()):
        logging.warning("‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –í—Å–µ –æ—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π —Ä–∞–≤–Ω—ã –Ω—É–ª—é –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å –ø—É—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –≤–æ–ø—Ä–æ—Å—ã –Ω–µ –¥–∞—é—Ç –æ—á–∫–æ–≤.")
        # –î–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂, –µ—Å–ª–∏ –Ω–∏ —É –∫–æ–≥–æ –Ω–µ—Ç –æ—á–∫–æ–≤.
        # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –≤–∑—è—Ç—å –ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä–∞, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä" in character_results:
            dominant_character_name = "–ì–∞—Ä—Ä–∏ –ü–æ—Ç—Ç–µ—Ä"
        else:
            # –ï—Å–ª–∏ –ì–∞—Ä—Ä–∏ –Ω–µ—Ç, –≤–æ–∑—å–º–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ø–∞–≤—à–µ–≥–æ—Å—è, –µ—Å–ª–∏ character_results –Ω–µ –ø—É—Å—Ç
            dominant_character_name = next(iter(character_results), None)
            
        if dominant_character_name is None: # –ï—Å–ª–∏ character_results –≤—Å–µ –µ—â–µ –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–µ—Ñ–æ–ª—Ç–Ω–æ–≥–æ
            logging.error("‚õîÔ∏è –û–®–ò–ë–ö–ê: character_results –ø—É—Å—Ç –∏–ª–∏ –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –¥–µ—Ñ–æ–ª—Ç–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π.")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞. –í–æ–∑–º–æ–∂–Ω–æ, –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –¥–∞–Ω–Ω—ã–µ.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_quiz")]])
            )
            await show_main_menu(update=None, context=context, chat_id_override=query.message.chat_id)
            return
    else:
        dominant_character_name = max(user_scores, key=user_scores.get)

    # –¢–µ–ø–µ—Ä—å character_results —Ç–æ—á–Ω–æ –Ω–µ –ø—É—Å—Ç –∏ dominant_character_name –Ω–µ None
    if dominant_character_name not in character_results:
        logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê: –ò–º—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{dominant_character_name}' (–Ω–∞–π–¥–µ–Ω–Ω–æ–µ –ø–æ –æ—á–∫–∞–º) –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ 'character_results.json'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª.")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à–µ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="start_quiz")]])
        )
        await show_main_menu(update=None, context=context, chat_id_override=query.message.chat_id)
        return

    character = character_results[dominant_character_name]
    # –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ 'name' –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤ character_results.json –¥–æ–ª–∂–Ω–∞ —Ä–µ—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—É KeyError
    # –û–Ω–∞ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ –ø—Ä–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ character_results.json
    image_path = f"assets/{character['image']}" 
    
    inline_keyboard = [
        [InlineKeyboardButton("–ü—Ä–æ–π—Ç–∏ –µ—â—ë —Ä–∞–∑", callback_data="restart")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –∞–≤—Ç–æ—Ä–∞", callback_data="donate")]
    ]
    inline_reply_markup = InlineKeyboardMarkup(inline_keyboard)

    try:
        await query.message.delete()
    except Exception as e:
        logging.warning(f"‚ö†Ô∏è –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–æ–º: {e}")

    try:
        await context.bot.send_photo(
            chat_id=query.message.chat_id,
            photo=open(image_path, "rb"),
            caption=f"üßô‚Äç‚ôÄÔ∏è *–¢—ã ‚Äî {character['name']}!*\n\n_{character['description']}_",
            parse_mode="Markdown",
            reply_markup=inline_reply_markup
        )
    except FileNotFoundError:
        logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê: –§–∞–π–ª '{image_path}' –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ '{character['name']}' –Ω–µ –Ω–∞–π–¥–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'potter_bot/assets/'.")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üßô‚Äç‚ôÄÔ∏è *–¢—ã ‚Äî {character['name']}!*\n\n_{character['description']}_ (–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ)",
            parse_mode="Markdown",
            reply_markup=inline_reply_markup
        )
    except Exception as e:
        logging.error(f"‚õîÔ∏è –û–®–ò–ë–ö–ê –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞: {e}")
        await context.bot.send_message(
            chat_id=query.message.chat_id,
            text=f"üßô‚Äç‚ôÄÔ∏è *–¢—ã ‚Äî {character['name']}!*\n\n_{character['description']}_ (–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è)",
            parse_mode="Markdown",
            reply_markup=inline_reply_markup
        )
    
    await show_main_menu_after_test(query, context)

async def show_main_menu_after_test(query, context):
    keyboard = [[KeyboardButton("–ù–∞—á–∞—Ç—å")]]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True, one_time_keyboard=False)
    
    await context.bot.send_message(
        chat_id=query.message.chat_id,
        text="–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –µ–≥–æ —Å–Ω–æ–≤–∞, –Ω–∞–∂–∞–≤ '–ù–∞—á–∞—Ç—å'.",
        reply_markup=reply_markup
    )


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_button))
    app.add_handler(MessageHandler(filters.Regex("^–ù–∞—á–∞—Ç—å$"), start))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()